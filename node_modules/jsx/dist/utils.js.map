{
  "version": 3,
  "sources": ["../js/utils.ts"],
  "sourcesContent": ["export function reverseForEach<T>(arr: T[], cb: (node: T) => boolean | void) {\n  arr.findLast(cb);\n}\n\nexport function swapRemove<T>(a: T[], i: number) {\n  a[i] = a[a.length - 1];\n  a.length--;\n}\n\nexport function swap<T>(arr: T[], idx1: number, idx2: number) {\n  [arr[idx1], arr[idx2]] = [arr[idx2], arr[idx1]];\n}\n\nexport function arrLast<T>(arr: T[]): T {\n  return arr[arr.length - 1];\n}\n\nexport function deepEq<A extends object, B extends object>(a: A | B, b: B | A): boolean {\n  const keys1 = Object.keys(a);\n  const keys2 = Object.keys(b);\n\n  const allKeys = new Set([...keys1, ...keys2]);\n\n  for (const key of allKeys) {\n    const aV = a[key];\n    const bV = b[key];\n\n    if (typeof aV === \"object\" && typeof bV === \"object\") {\n      if (aV instanceof Date && bV instanceof Date) {\n        if (aV.getTime() !== bV.getTime()) {\n          return false;\n        }\n      }\n      else if (aV instanceof Map && bV instanceof Map) {\n        if (aV.size !== bV.size) {\n          return false;\n        }\n\n        for (const [key, value] of aV) {\n          if (!bV.has(key) || bV.get(key) !== value) {\n            return false;\n          }\n        }\n      }\n      else if (aV instanceof Set && bV instanceof Set) {\n        if (aV.size !== bV.size) {\n          return false;\n        }\n\n        for (const item of aV) {\n          if (!bV.has(item)) {\n            return false;\n          }\n        }\n      }\n      else if (!deepEq(aV, bV)) {\n        return false;\n      }\n    }\n    else if (aV !== bV) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nexport function iterChildrenDeep<T extends Node>(node: T, fn: (node: T) => void) {\n  if (node.nodeType === node.ELEMENT_NODE) {\n    for (const c of (node as unknown as Element).getElementsByTagName(\"*\")) {\n      fn(c as unknown as T);\n    }\n  }\n\n  fn(node);\n}\n\nexport function iterChildNodesDeep(node: Node, fn: (node: ChildNode) => void) {\n  fn(node as ChildNode);\n  for (const n of node.childNodes) {\n    iterChildNodesDeep(n, fn);\n  }\n  (node as ChildNode).remove();\n}\n\nexport type ElementPosition = {\n  parent: HTMLElement | null,\n  prevSibling: ChildNode | null,\n  nextSibling: ChildNode | null,\n  setFromElement<T extends Node>(element: T): void,\n  isPositioned(): boolean,\n  getInsertFunction(): InsertNodeFn,\n  insertNode(...nodes: Parameters<InsertNodeFn>): boolean,\n};\n\nexport type InsertNodeFn = ChildNode[\"after\"];\n\nexport function createElementPosition<T extends Node>(elem?: T): ElementPosition {\n  const self: ElementPosition = {\n    parent: null,\n    prevSibling: null,\n    nextSibling: null,\n    setFromElement(element) {\n      this.parent = element.parentElement;\n      this.prevSibling = element.previousSibling;\n      this.nextSibling = element.nextSibling;\n    },\n    isPositioned() {\n      return !!(this.parent || this.prevSibling || this.nextSibling);\n    },\n    getInsertFunction() {\n      if (this.prevSibling && this.prevSibling.parentElement) {\n        return this.prevSibling.after.bind(this.prevSibling);\n      }\n      if (this.nextSibling && this.nextSibling.parentElement) {\n        return this.nextSibling.before.bind(this.nextSibling);\n      }\n      if (this.parent) {\n        if (this.nextSibling) {\n          return this.parent.prepend.bind(this.parent);\n        }\n        return this.parent.append.bind(this.parent);\n      }\n      throw new Error(\"Could not find element position\");\n    },\n    insertNode(...nodes) {\n      try {\n        this.getInsertFunction()(...nodes);\n        return true;\n      }\n      catch (_) {\n        return false;\n      }\n    },\n  };\n\n  if (elem) {\n    queueMicrotask(() => self.setFromElement(elem));\n  }\n\n  return self;\n}\n"],
  "mappings": "AAAO,SAAS,eAAkB,KAAU,IAAiC;AAC3E,MAAI,SAAS,EAAE;AACjB;AAEO,SAAS,WAAc,GAAQ,GAAW;AAC/C,IAAE,CAAC,IAAI,EAAE,EAAE,SAAS,CAAC;AACrB,IAAE;AACJ;AAEO,SAAS,KAAQ,KAAU,MAAc,MAAc;AAC5D,GAAC,IAAI,IAAI,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,IAAI,IAAI,GAAG,IAAI,IAAI,CAAC;AAChD;AAEO,SAAS,QAAW,KAAa;AACtC,SAAO,IAAI,IAAI,SAAS,CAAC;AAC3B;AAEO,SAAS,OAA2C,GAAU,GAAmB;AACtF,QAAM,QAAQ,OAAO,KAAK,CAAC;AAC3B,QAAM,QAAQ,OAAO,KAAK,CAAC;AAE3B,QAAM,UAAU,oBAAI,IAAI,CAAC,GAAG,OAAO,GAAG,KAAK,CAAC;AAE5C,aAAW,OAAO,SAAS;AACzB,UAAM,KAAK,EAAE,GAAG;AAChB,UAAM,KAAK,EAAE,GAAG;AAEhB,QAAI,OAAO,OAAO,YAAY,OAAO,OAAO,UAAU;AACpD,UAAI,cAAc,QAAQ,cAAc,MAAM;AAC5C,YAAI,GAAG,QAAQ,MAAM,GAAG,QAAQ,GAAG;AACjC,iBAAO;AAAA,QACT;AAAA,MACF,WACS,cAAc,OAAO,cAAc,KAAK;AAC/C,YAAI,GAAG,SAAS,GAAG,MAAM;AACvB,iBAAO;AAAA,QACT;AAEA,mBAAW,CAACA,MAAK,KAAK,KAAK,IAAI;AAC7B,cAAI,CAAC,GAAG,IAAIA,IAAG,KAAK,GAAG,IAAIA,IAAG,MAAM,OAAO;AACzC,mBAAO;AAAA,UACT;AAAA,QACF;AAAA,MACF,WACS,cAAc,OAAO,cAAc,KAAK;AAC/C,YAAI,GAAG,SAAS,GAAG,MAAM;AACvB,iBAAO;AAAA,QACT;AAEA,mBAAW,QAAQ,IAAI;AACrB,cAAI,CAAC,GAAG,IAAI,IAAI,GAAG;AACjB,mBAAO;AAAA,UACT;AAAA,QACF;AAAA,MACF,WACS,CAAC,OAAO,IAAI,EAAE,GAAG;AACxB,eAAO;AAAA,MACT;AAAA,IACF,WACS,OAAO,IAAI;AAClB,aAAO;AAAA,IACT;AAAA,EACF;AAEA,SAAO;AACT;AAEO,SAAS,iBAAiC,MAAS,IAAuB;AAC/E,MAAI,KAAK,aAAa,KAAK,cAAc;AACvC,eAAW,KAAM,KAA4B,qBAAqB,GAAG,GAAG;AACtE,SAAG,CAAiB;AAAA,IACtB;AAAA,EACF;AAEA,KAAG,IAAI;AACT;AAEO,SAAS,mBAAmB,MAAY,IAA+B;AAC5E,KAAG,IAAiB;AACpB,aAAW,KAAK,KAAK,YAAY;AAC/B,uBAAmB,GAAG,EAAE;AAAA,EAC1B;AACA,EAAC,KAAmB,OAAO;AAC7B;AAcO,SAAS,sBAAsC,MAA2B;AAC/E,QAAM,OAAwB;AAAA,IAC5B,QAAQ;AAAA,IACR,aAAa;AAAA,IACb,aAAa;AAAA,IACb,eAAe,SAAS;AACtB,WAAK,SAAS,QAAQ;AACtB,WAAK,cAAc,QAAQ;AAC3B,WAAK,cAAc,QAAQ;AAAA,IAC7B;AAAA,IACA,eAAe;AACb,aAAO,CAAC,EAAE,KAAK,UAAU,KAAK,eAAe,KAAK;AAAA,IACpD;AAAA,IACA,oBAAoB;AAClB,UAAI,KAAK,eAAe,KAAK,YAAY,eAAe;AACtD,eAAO,KAAK,YAAY,MAAM,KAAK,KAAK,WAAW;AAAA,MACrD;AACA,UAAI,KAAK,eAAe,KAAK,YAAY,eAAe;AACtD,eAAO,KAAK,YAAY,OAAO,KAAK,KAAK,WAAW;AAAA,MACtD;AACA,UAAI,KAAK,QAAQ;AACf,YAAI,KAAK,aAAa;AACpB,iBAAO,KAAK,OAAO,QAAQ,KAAK,KAAK,MAAM;AAAA,QAC7C;AACA,eAAO,KAAK,OAAO,OAAO,KAAK,KAAK,MAAM;AAAA,MAC5C;AACA,YAAM,IAAI,MAAM,iCAAiC;AAAA,IACnD;AAAA,IACA,cAAc,OAAO;AACnB,UAAI;AACF,aAAK,kBAAkB,EAAE,GAAG,KAAK;AACjC,eAAO;AAAA,MACT,SACO,GAAG;AACR,eAAO;AAAA,MACT;AAAA,IACF;AAAA,EACF;AAEA,MAAI,MAAM;AACR,mBAAe,MAAM,KAAK,eAAe,IAAI,CAAC;AAAA,EAChD;AAEA,SAAO;AACT;",
  "names": ["key"]
}
